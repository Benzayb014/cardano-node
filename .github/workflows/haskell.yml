name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'msys2 {0}' || 'bash' }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:

    - name: "WIN: Setup MSYS2 and libraries"
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make
          git
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-libsodium
          mingw-w64-x86_64-lmdb
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-jq


    - name: "LINUX,MAC: Setup haskell"
      if: matrix.os != 'windows-latest'
      uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 3.6.2.0

    - name: "WIN: Setup Haskell"
      if: matrix.os == 'windows-latest'
      run: |
        # see https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/scripts/bootstrap/bootstrap-haskell
        curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | \
          BOOTSTRAP_HASKELL_NONINTERACTIVE=1 \
          BOOTSTRAP_HASKELL_ADJUST_CABAL_CONFIG=1 \
          BOOTSTRAP_HASKELL_ADJUST_BASHRC=1 \
          BOOTSTRAP_HASKELL_GHC_VERSION="${{ matrix.ghc }}" \
          BOOTSTRAP_HASKELL_CABAL_VERSION="3.6.2.0" \
          sh


        cat <(echo "source /c/ghcup/env") ~/.bashrc > ~/.bashrc.new
        mv ~/.bashrc.new ~/.bashrc

        source ~/.bashrc

        echo "# Original cabal config extra-lib-dirs"
        grep extra-lib-dirs /c/cabal/config

        sed -i 's/C:\\msys64\\mingw64\\lib/C:\\ghcup\\ghc\\8.10.7\\mingw\\x86_64-w64-mingw32\\lib, C:\\msys64\\mingw64\\lib/g' /c/cabal/config

        echo "# Modified cabal config extra-lib-dirs"
        grep extra-lib-dirs /c/cabal/config

        ghc --version
        cabal --version

    - name: Set cache version
      run: echo "CACHE_VERSION=grFfw8r" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Add build script path
      run: |
        # MSYS2 doesn't inherit $GITHUB_PATH, so this workaround is neede
        cat <(echo "export PATH=$PATH:$(pwd)/.github/bin") ~/.bashrc > ~/.bashrc.new
        mv ~/.bashrc.new ~/.bashrc

        # MacOS and Linux use $GITUB_PATH
        echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "WIN: Install build environment (secp256k1)"
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/bitcoin-core/secp256k1
        ( cd secp256k1
          git switch $SECP256K1_REF --detach
          ./autogen.sh
          ./configure --enable-module-schnorrsig --enable-experimental
          make
          make check
          make install
        )
        rm -rf secp256k1

    - name: "LINUX: Install build environment (apt-get)"
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y install liblmdb-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (secp256k1)"
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install autoconf automake libtool
        mkdir secp256k1-sources
        cd secp256k1-sources
        git clone https://github.com/bitcoin-core/secp256k1.git
        ( cd secp256k1
          git reset --hard $SECP256K1_REF
          ./autogen.sh
          ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
          make
          make check
          sudo make install
        )

    - name: "MAC: Install build environment (brew)"
      if: matrix.os == 'macos-latest'
      run: |
        brew install libsodium
        brew install lmdb
        brew install openssl

    - name: "MAC: Install build environment (secp256k1)"
      if: matrix.os == 'macos-latest'
      run: |
        brew install autoconf automake libtool
        mkdir secp256k1-sources
        cd secp256k1-sources
        git clone https://github.com/bitcoin-core/secp256k1.git
        ( cd secp256k1
          git reset --hard $SECP256K1_REF
          ./autogen.sh
          ./configure --enable-module-schnorrsig --enable-experimental
          make
          make check
          make install
        )

    - name: "List all pkg-config packages"
      run: |
        echo "=== Package list ==="
        pkg-config --list-all

        echo "=== Package details ==="
        for x in $(pkg-config --list-all | cut -d ' ' -f 1); do
          echo "# $x"
          pkg-config "$x" --cflags --libs
        done

    - name: Cabal update
      run: retry 2 cabal update

    - name: Configure build
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp .github/workflows/cabal.project.local.$RUNNER_OS cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Record dependencies
      run: |
        cabal build all --dry-run
        cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
        date > date.txt

    - name: Cache Cabal store
      uses: actions/cache@v2
      with:
        path: ${{ matrix.os == 'windows-latest' && '/c/cabal/store' || steps.setup-haskell.outputs.cabal-store }}
        key: cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
        restore-keys: |
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build
      run: cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api

    - name: Run tests
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test all;
        else
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test \
            cardano-testnet \
            cardano-api \
            cardano-node \
            cardano-node-chairman \
            cardano-cli \
            cardano-submit-api
        fi


    - name: "Tar artifacts"
      run: |
        mkdir -p artifacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            ( cd artifacts
              tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
            )
          else
            echo "Skipping artifact $exe"
          fi
        done

    - name: Save Artifact
      if: matrix.ghc == '8.10.7'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os }}
        path: ./artifacts

    - name: Delete socket files in chairman tests in preparation for uploading artifacts
      if: ${{ always() }}
      run: |
        if [ -d "${{ runner.temp }}/chairman" ]; then
          find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.ghc }}
        path: ${{ runner.temp }}/chairman/

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact
      uses: actions/download-artifact@v1
      with:
        name: artifacts-ubuntu-latest

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip
